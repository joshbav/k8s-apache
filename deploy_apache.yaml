# My main to do list, and the deployment yaml

#### THIS IS A MESSY WORK IN PROGRESS

# TODO IN POD SPEC:

# securityContext in apache pod, 
#   also https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-seccomp-profile-for-a-container
# automountServiceAccountToken
# enableServiceLinks
# hostAliases
# hostIPC
# hostNetwork
# hostPID
# hostname
# imagePullSecrets:
# overhead
# preemptionPolicy
# priority
# readinessGates
# restartPolicy
# runtimeClassName
# schedulerName
# serviceAccountName
# setHostnameAsFQDN
# shareProcessNamespace  
# subdomain
# 

# OBJECTS TO ADD
# runtimeclass
# clusterrolebinding
# cluster role
# role binding
# role
# volumeattachment
# flowschema?
# prioritylevelconfigurations 
# leases?
# certificatesigningrequests 
# tokenreviews                                   
#localsubjectaccessreviews
#SelfSubjectAccessReview
#SelfSubjectRulesReview
#subjectaccessreviews   
# controllerevisions
# apiservices
# service accounts
# endpoint
# 


#service account, including:https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection
# stateful set, started
# daemonset - not done
# 
#  
# post stop handler example
# this traefik is old, now uses CRDs, switch to k8s nginx ingres? (not f5's) https://kubernetes.github.io/ingress-nginx/deploy/
# directions for kind: https://kind.sigs.k8s.io/docs/user/ingress/#ingress-nginx

#add delay to preStop, per: https://blog.gruntwork.io/delaying-shutdown-to-wait-for-pod-deletion-propagation-445f779a8304

#under spec add:
#securityContext:
#          capabilities:
#            add:
#              - IPC_LOCK

# do local volume https://github.com/kubernetes/examples/blob/master/mysql-wordpress-pd/local-volumes.yaml

# load balancer, all commented out
# csr?
# service topologyKeys, use prefer node local example
# different types of services
# configmap more data like file (already done, but not tested), ref: https://github.com/kubernetes/kubernetes/issues/22368
# mount secret as file, document how I made it
  # show example use, but mention that they aren't as useful as people assume, 
# PV and PVC based on hostPath and emptyDir (uses /tmp, never use in prod)
# dnsConfig:  per https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html
# https://kubernetes.io/docs/concepts/workloads/pods/podpreset/
# secret from file, mounted as file
# activeDeadlineSeconds
# httpHeaders to liveness and ready probe, also a command example
# service types such as ipvs but commented out, with links

# yaml can be very unforgiving, here's a good online validator to use:  
#   http://yaml-online-parser.appspot.com/
#   but it does not like multiple yaml docs, so cut each doc at the --- line before submitting
#   leave the default output of json, since kubernetes converts yaml to json internally
# I suggest using Microsoft's VS Code with the Redhat Yaml plugin for K8s
#   https://github.com/redhat-developer/vscode-yaml

apiVersion: apps/v1
kind: Deployment
metadata: # Note these are for the deployment, not the pods it creates
  name: apache-deployment
  namespace: apache
  labels:
    app: apache
    prod: "false" # This yaml will be invalid without the quotes, which is odd considering the prior line worked.
    # Note, these are common labels: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
  annotations:
    kubernetes.io/ingress-bandwidth: 1M  # An alpha feature (as of K8s ver?) that is only supported by some CNIs.
    kubernetes.io/egress-bandwidth: 1M   # Reference: https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#support-traffic-shaping
    build-time: "Nov-14-2018, 9:30am UTC"
    jenkins-job-id: "jenkins-1234"
    deploy-time: "Nov-14-2018, 10:04am UTC"
spec: # The deployment spec, which contains a template, which contains a pod spec
  # In production you would likely not specify a replica, because a rolling update would scale up/down to match it
  # replicas: 1
  # To avoid one ReplicaSet overwriting the past copies of others
    # see https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#revision-history-limit··
    # and the old default of 2 was too low, new default is 10.
  revisionHistoryLimit: 20
  paused: false # Deployments can be rolled out in a paused state
  progressDeadlineSeconds: # Optional, the number of seconds you want to wait for your Deployment to progress before the system reports back that the Deployment has failed progressing
  selector: # Allow this Deployment/ReplicaSet/Pod(s) to be found via an app=apache
    matchLabels:
      app: apache
  strategy:
    type: RollingUpdate # The type of update done on this deployment will be a rolling update
    rollingUpdate:
      # 3 more pods than the current replica value is allowed during an update
      maxSurge: 3 # Can also be a percentage, which gets rounded up
      # Because maxSurge is set, no existing pod will be terminated until a new pod is available 
      maxUnavailable: 0
  template: # Pod template
    metadata:
      labels:
        app: apache
        pod-label: example
        # Note, these are common labels: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
      annotations:
        pod-annotation: foo

    spec: # The pod spec
      dnsPolicy: Default # TODO add link
      # How long after sigterm is sent will a sigkill be sent, 30 is the K8s default. Note kubectl can override this with delete deploy  --force --grace-period=X. This grace period timer begins before the preStop hook is called, not when sigterm is sent
      terminationGracePeriodSeconds: 15
      priorityClassName: low-priority-nonpreempting # Pod priority class
      progressDeadlineSeconds: # Optional, the number of seconds you want to wait for your Deployment to progress before the system reports back that the Deployment has failed progressing
      minReadySeconds: # Default 0, not sure why to use this when probes are in use

      securityContext: # Applies to all containers in the pod, at this level. See next security context section.
        #runAsUser: 1000  # For all containers in the pod, all processes run with user ID 1000
        #runAsGroup: 3000 # Use primary group ID 3000 for all processes within all containers of the pod
        #fsGroup: 2000    # All processes of the container are also part of the supplementary group ID 2000
        #fsGroupChangePolicy: "OnRootMismatch" # or: Always  beta in v1.20
    
      # This will tell the scheduler to prefer (not require) one pod per node until that's no longer possible, only then a node with an existing pod will receive a second instance. 
      # Note antiaffinity doesn't scale very well and can only be used in clusters up to a few hundred nodes in v1.11 (TODO check newer versions). 
      # Since this is podAntiAffinity it will avoid scheduling to nodes that already have app=apache
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution: # Alternative: requiredDuringSchedulingIgnoredDuringExecution
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - apache
                topologyKey: kubernetes.io/hostname # Note this is not fully a standard label as of v1.15
        #podAffinity: # Opposite of podAntiAffinity, useful for scheduling pods to the same node as other pods.
        #Now for node affinity, per https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
        #nodeAffinity # Make scheduling decisions based on node labels instead of pod labels.
        #nodeAntiAffity:
        #NOTE: v1.22 has a beta feature of a namespace selector
     
      #nodeSelector: The simplest form of node selection constraint, scales well, but I tend to use affinity instead. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector 
      #nodeName: A crude node selection constraint, not very useful. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
     
      tolerations:
      - key: "no-apache"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
     
      # Spreads pod replicas according to labels. Per: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
      topologySpreadConstraints:
      - maxSkew: 1 # To what degree may pods be unevenly distributued. Functionality depends upon setting of whenUnsatisfiable
        topologyKey: topology.kubernetes.io/zone # Node labels to key from. Standard as of v1.17
        whenUnsatisfiable: ScheduleAnyway # or: DoNotSchedule
        labelSelector:
          matchLabels:
            app: apache # What pod labels to ensure are spread among nodes by the topologyKey
      - maxSkew: 1 # By having 2 spread constraints we can spread the pods across both AZ's and host names
                   # Note this is redundant since we're already doing podAntiAffinity above 
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway # or: DoNotSchedule
        labelSelector:
          matchLabels:
            app: apache

      initContainers: # https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
      - name: apache-init
        image: httpd:2.4.46
        command: ['sh', '-c', 'echo This is an init container', 'sleep 2', 'done']
        resources:
           # If a Container specifies its own cpu/memory limit, but does not specify a memory request, the request is set to the limit. TODO: WRONG: Same when vice versa.
           # See status.qosClass when the pod is running to see if it's guaranteed, burstable, or besteffort.
           # For a pod to be assigned a QoS class of guaranteed every container, including init, must have a memory and cpu limit and request that are the same.
           # For a pod to be assigned burstable, it does not meet the criteria for guaranteed, and at least one container has a memory or CPU request.
           # For a pod to be assigned besteffort, all containers in the pod must have no memory and CPU limits or requests.
           # Reference: https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/
          requests:
            cpu: 0.1
            ephemeral-storage: 0.5Gi
            memory: 0.1G
          limits:
            cpu: 0.5
            memory: 0.2G
            ephemeral-storage: 2Gi
     
      containers:
      - name: apache
        # Consider pulling an image by digest instead of tag, it's immutable
        image: httpd:2.4.46  # The version of apache I copied the conf file into the configmap
        imagePullPolicy: Always # Always is still fast because of caching, only the manifest is pulled  # IfNotPresent, Never
                                # Always should always be used, to avoid an older image being used.
#        command: ['/bin/sleep'] # useful for troubleshooting to override entrypoint then exec in, but first disable liveness probe.
#        args: ["3600"] # appends to command. See the initContainer section for a smoother way.
        ports:
        - containerPort: 80
        volumeMounts:
        - name: apache-conf
          mountPath: "/usr/local/apache2/conf/test.conf"
          subPath: "httpd.conf" # without this the whole conf directory is replaced, but we just want to replace a file.
            # http://blog.andyserver.com/2019/02/using-subpath-property-of-openshift-volume-mounts/
          readOnly: false
        - name: podinfo  # The downward API # https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
          mountPath: /podinfo
        env:
        - name: k8s_deployment_variable
          value: "this-envvar-was-injected-by-the-k8s-deployment"
        - name: k8s_secret_password
          valueFrom:
            secretKeyRef:
              name: apache-secret
              key: password-from-secret
        - name: from_k8s_config_map
          valueFrom:
            configMapKeyRef:
              name: apache-configmap
              key: envvar_from_configmap
        # envFrom: can be used to define all of a ConfigMap(s) and/or secret(s) data as container environment variables.
          # If you use envFrom to define environment variables from ConfigMaps, keys that are considered invalid will be skipped. The pod will be allowed to start, but the invalid names will be recorded in the event log
        resources:
          requests:
            cpu: 0.1
            ephemeral-storage: 0.5Gi
            memory: 0.1G
          limits:
            cpu: 0.2
            memory: 0.2G
            ephemeral-storage: 2Gi
        livenessProbe:
          # A liveness probe is ran during the container's lifecycle as a health check
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: X-Custom-Header
              value: k8s-liveness-probe
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 10
        readinessProbe:
          # Is different than a liveness probe, one difference is that a failure triggers
          # traffic to not be routed to the pod, but it takes a failed liveness probe before
          # the pod is killed/replaced. Also, traffic is only sent to a pod after a readiness 
          # probe succeeds, unlike a liveness probe, so if a pod takes a while to initialize
          # we don't want any traffic going to it until it's ready. 
          # Readiness probes are quite useful for large java apps that take time to initialize.  
          # Use a readiness probe in production.
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: X-Custom-Header
              value: k8s-readiness-probe
          initialDelaySeconds: 5
          # Since this is a specific autoscale lab use case where the web server is slow
          #  so as to make a lot of CPU use, we want a long timeout
          timeoutSeconds: 10
          failureThreshold: 3
        lifecycle:
          postStart:
            exec:
              # Can be used to do commands not in the container's entrypoint
              # Can be useful for diagnostics
              # Note there is no guarantee it's called before the container's entrypoint!
              command: ["/bin/sh", "-c", "echo Hello from the postStart handler"]
          preStop:
            exec:
              # Can be used to trigger a graceful shutdown, such as stopping services
              # Is only used when a pod is terminated. When a pod completes it's not called.
              # This hook is called immediately before a container is terminated. 
              # No parameters are passed to the handler. This event handler is blocking, and must
              #  complete before the call to delete the container is sent to the Docker daemon.
              # The SIGTERM notification sent by Docker is also still sent.
              # Note NGINX is an example where this is needed, since it does not shut down
              #  gracefully with a sigterm. Instead it needs '/usr/sbin/nginx -s quit' ran
              command: ["/bin/sh", "-c", "echo Hello from the preStop handler"]
        #TODO securityContext:
        # End of apache container

      volumes:
      - name: apache-conf
        configMap:
          name: apache-configmap
          items:
          - key: httpd.conf    # the apache config file is stored in the configmap
            path: httpd.conf
      - name: podinfo
        downwardAPI: # The K8s downward API # https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "cpu_request"
              resourceFieldRef: # Note the different format for container fields vs pod fields above
                containerName: apache
                resource: requests.cpu
                divisor: 1m
    # End of pod spec


